{"version":3,"sources":["constants.js","components/Task/index.js","components/TaskSortable/index.js","components/Column/index.js","initialTasks.js","components/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["TASK_STATUS","ITEM_TYPE","PropTypes","object","number","string","Task","props","taskData","taskIndex","columnName","content","id","taskRef","useRef","useDrag","item","type","currentColumn","isDragging","monitor","getItem","collect","Boolean","didDrop","drag","preview","className","ref","node","func","TaskSortable","children","sortTaskList","itemRef","canDrag","useDrop","accept","hover","current","canDrop","dragTaskIndex","dropTaskIndex","isOver","drop","array","Column","columnList","changeTaskStatus","moveTask","targetColumn","collectedProps","data-is-over","data-is-droppable","map","task","key","initialTaskLists","Board","useState","taskList","setTaskList","todoList","todo","inProgressList","inProgress","doneList","done","currentColumnList","splice","newTargetColumn","push","prevState","newColumnList","taskHolder","DndProvider","backend","Backend","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cafca145.chunk.js","sourcesContent":["export const TASK_STATUS = {\n  TODO: 'todo',\n  IN_PROGRESS: 'inProgress',\n  DONE: 'done',\n}\n\nexport const ITEM_TYPE = {\n  TASK: 'task',\n  COLUMN: 'column'\n}","import React, { useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport './style.css'\nimport { useDrag } from 'react-dnd'\nimport { ITEM_TYPE } from '../../constants'\n\nexport const propTypes = {\n  taskData: PropTypes.object,\n  taskIndex: PropTypes.number,\n  columnName: PropTypes.string,\n}\n\nfunction Task(props) {\n  const { taskData, taskIndex, columnName } = props\n  const { content, id } = taskData\n\n  const taskRef = useRef(null)\n\n  const [, drag, preview] = useDrag({\n    item: {\n      id: taskData.id,\n      type: ITEM_TYPE.COLUMN,\n      taskIndex,\n      currentColumn: columnName,\n    },\n    // begin: monitor => { },\n    // end: (item, monitor) => { },\n    // canDrag: monitor => { },\n    isDragging: monitor => monitor.getItem().id === taskData.id,\n    collect: monitor => ({\n      isDragging: Boolean(monitor.isDragging()),\n      didDrop: Boolean(monitor.didDrop()),\n    }),\n  })\n\n\n  return (\n    <div className='task' ref={preview(drag(taskRef))}>\n      <strong>[IT-{id}]</strong>\n      <p>{content}</p>\n    </div>\n  )\n}\n\nexport default Task\n","import React, { useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { useDrag, useDrop } from 'react-dnd'\nimport { ITEM_TYPE } from '../../constants'\n\nexport const propTypes = {\n  children: PropTypes.node,\n  taskData: PropTypes.object,\n  taskIndex: PropTypes.number,\n  columnName: PropTypes.string,\n  sortTaskList: PropTypes.func,\n}\n\n\nfunction TaskSortable(props) {\n  const { children, taskData, taskIndex, sortTaskList, columnName } = props\n\n  const itemRef = useRef(null)\n\n  const [, drag, preview] = useDrag({\n    item: {\n      id: taskData.id,\n      type: ITEM_TYPE.COLUMN,\n      taskIndex,\n    },\n    // begin: monitor => {},\n    // end: (item, monitor) => {},\n    // isDragging: monitor => {},\n    collect: monitor => ({\n      canDrag: Boolean(monitor.canDrag()),\n      isDragging: Boolean(monitor.isDragging()),\n      didDrop: Boolean(monitor.didDrop()),\n    }),\n  })\n\n  const [, drop] = useDrop({\n    accept: ITEM_TYPE.COLUMN,\n    hover: (item, monitor) => {\n      // 異常處理判斷\n      if (!itemRef.current) return\n      if (!monitor.canDrop()) return\n\n      // 拖拽目標的Index\n      const dragTaskIndex = item.taskIndex\n      // 放置目標Index\n      const dropTaskIndex = taskIndex\n\n      // 如果拖拽目標和放置目標相同的話，停止執行\n      if (dragTaskIndex === dropTaskIndex) return {}\n\n      // 執行交換位置的方法\n      sortTaskList({ dragTaskIndex, dropTaskIndex, columnName })\n      item.taskIndex = dropTaskIndex\n    },\n    // drop: (item, monitor) => {},\n    canDrop: (item, monitor) => {\n      const dragTaskIndex = item.taskIndex\n      const dropTaskIndex = taskIndex\n      // 若 hover 為自己，則 canDrop 設為 false，不顯示 DnD 插入線\n      const isMySelf = dragTaskIndex === dropTaskIndex\n      return !isMySelf\n    },\n    collect: monitor => ({\n      isOver: Boolean(monitor.isOver()),\n      canDrop: Boolean(monitor.canDrop()),\n    }),\n  })\n\n  drag(drop(itemRef))\n\n  return (\n    <div ref={preview(itemRef)}>\n      {children}\n    </div>\n  )\n}\n\nexport default TaskSortable","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Task from '../Task'\nimport './style.css'\nimport { useDrop } from 'react-dnd'\nimport { ITEM_TYPE } from '../../constants'\nimport TaskSortable from '../TaskSortable/'\n\nexport const propTypes = {\n  columnList: PropTypes.array,\n  columnName: PropTypes.string,\n  changeTaskStatus: PropTypes.func,\n  sortTaskList: PropTypes.func,\n}\n\nfunction Column(props) {\n  const { columnList = [], columnName = \"\", changeTaskStatus, sortTaskList } = props\n\n  const [collectedProps, drop] = useDrop({\n    accept: [ITEM_TYPE.COLUMN, ITEM_TYPE.TASK],\n    drop: (item, monitor) => {\n      if (item.currentColumn === columnName) return\n      changeTaskStatus({ moveTask: item, targetColumn: columnName })\n    },\n    // hover: (item, monitor) => { },\n    // canDrop: (item, monitor) => { },\n    collect: monitor => ({\n      isOver: Boolean(monitor.isOver()),\n      canDrop: Boolean(monitor.canDrop())\n    }),\n  })\n\n  const { isOver, canDrop } = collectedProps\n\n  return (\n    <div className='column' ref={drop} data-is-over={isOver && canDrop} data-is-droppable={canDrop}>\n      <h3 className='column-title'>{columnName}</h3>\n      {columnList.map((task, taskIndex) => {\n        return (\n          <TaskSortable key={task.id} taskData={task} taskIndex={taskIndex} sortTaskList={sortTaskList} columnName={columnName}>\n            <Task key={task.id} taskData={task} taskIndex={taskIndex} columnName={columnName} />\n          </TaskSortable>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Column\n","import { TASK_STATUS } from './constants'\n\nconst initialTasks = [\n  {\n    id: 100,\n    content: 'Code Refinement',\n    status: TASK_STATUS.TODO,\n  },\n  {\n    id: 102,\n    content: 'Study Vue',\n    status: TASK_STATUS.TODO,\n  },\n  {\n    id: 103,\n    content: 'Add RWD',\n    status: TASK_STATUS.TODO,\n  },\n  {\n    id: 104,\n    content: 'Fix IE bugs',\n    status: TASK_STATUS.TODO,\n  },\n  {\n    id: 105,\n    content: 'Study React-beautiful-DnD',\n    status: TASK_STATUS.TODO,\n  },\n  {\n    id: 106,\n    content: 'Write testing',\n    status: TASK_STATUS.TODO,\n  }\n]\n\nconst initialTaskLists = {\n  [TASK_STATUS.TODO]: [\n    {\n      id: 100,\n      content: 'Code Refinement',\n    },\n    {\n      id: 102,\n      content: 'Study Vue',\n    },\n    {\n      id: 103,\n      content: 'Add RWD',\n    },\n  ],\n  [TASK_STATUS.IN_PROGRESS]: [\n    {\n      id: 104,\n      content: 'Fix IE bugs',\n    },\n    {\n      id: 105,\n      content: 'Study React-beautiful-DnD',\n    },\n  ],\n  [TASK_STATUS.DONE]: [\n    {\n      id: 106,\n      content: 'Write testing',\n    }\n  ],\n\n}\n\nexport {\n  initialTasks,\n  initialTaskLists\n}","import React, { useState } from 'react'\n// import PropTypes from 'prop-types'\nimport Column from '../Column'\nimport { TASK_STATUS } from '../../constants'\nimport './style.css'\nimport { DndProvider } from 'react-dnd'\nimport Backend from 'react-dnd-html5-backend'\nimport { initialTaskLists } from '../../initialTasks'\n\nexport const propTypes = {}\n\nfunction Board(props) {\n  const [taskList, setTaskList] = useState(initialTaskLists)\n  const { todo: todoList, inProgress: inProgressList, done: doneList } = taskList\n  // console.log(taskList)\n\n  const changeTaskStatus = ({ moveTask, targetColumn }) => {\n    const currentColumn = moveTask.currentColumn\n    const currentColumnList = [...taskList[currentColumn]]\n    const task = currentColumnList.splice(moveTask.taskIndex, 1)\n    const newTargetColumn = [...taskList[targetColumn]]\n    newTargetColumn.push(...task)\n    setTaskList(prevState => ({\n      ...prevState,\n      [moveTask.currentColumn]: currentColumnList,\n      [targetColumn]: newTargetColumn\n    }))\n  }\n\n  const sortTaskList = ({ dragTaskIndex, dropTaskIndex, columnName }) => {\n    const newColumnList = [...taskList[columnName]]\n    const taskHolder = newColumnList[dragTaskIndex]\n    newColumnList[dragTaskIndex] = newColumnList[dropTaskIndex]\n    newColumnList[dropTaskIndex] = taskHolder\n\n    setTaskList(prevState => ({\n      ...prevState,\n      [columnName]: newColumnList\n    }))\n  }\n\n\n  return (\n    <DndProvider backend={Backend}>\n      <div className='board'>\n        <Column columnList={todoList} columnName={TASK_STATUS.TODO} changeTaskStatus={changeTaskStatus} sortTaskList={sortTaskList} />\n        <Column columnList={inProgressList} columnName={TASK_STATUS.IN_PROGRESS} changeTaskStatus={changeTaskStatus} sortTaskList={sortTaskList} />\n        <Column columnList={doneList} columnName={TASK_STATUS.DONE} changeTaskStatus={changeTaskStatus} sortTaskList={sortTaskList} />\n      </div>\n    </DndProvider>\n  )\n}\n\nexport default Board\n\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}