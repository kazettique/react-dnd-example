{"version":3,"sources":["context.js","constants.js","components/Task/index.js","components/Column/index.js","initialTasks.js","components/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["ContentContext","React","createContext","TASK_STATUS","TASK_STATUS_NAME","ITEM_TYPE","PropTypes","object","number","Task","props","task","columnIndex","taskIndex","useContext","sortTaskList","insertToTaskList","id","content","taskRef","useRef","useDrag","item","type","collect","monitor","canDrag","Boolean","isDragging","didDrop","collectedDragProps","drag","preview","useDrop","accept","hover","current","canDrop","sourceColumnIndex","sourceTaskIndex","targetColumnIndex","targetTaskIndex","isOver","isOverCurrent","shallow","collectedDropProps","drop","className","ref","data-is-over","data-is-dragging","array","string","Column","columnList","addToTaskList","columnTitle","getItem","collectedProps","data-can-drop","map","key","initialTaskLists","Board","useState","taskList","setTaskList","useEffect","console","log","newTaskList","_","cloneDeep","currentTaskList","context","splice","push","DndProvider","backend","Backend","Provider","value","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.035c1029.chunk.js","sourcesContent":["import React from 'react'\n\nexport const ContentContext = React.createContext()\n","export const TASK_STATUS = {\n  TODO: 0,\n  IN_PROGRESS: 1,\n  DONE: 2,\n}\n\nexport const TASK_STATUS_NAME = {\n  [TASK_STATUS.TODO]: 'todo',\n  [TASK_STATUS.IN_PROGRESS]: 'inProgress',\n  [TASK_STATUS.DONE]: 'done',\n}\n\nexport const ITEM_TYPE = {\n  TASK: 'task',\n}","import React, { useContext, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport './style.css'\nimport { ContentContext } from '../../context'\nimport { useDrag, useDrop } from 'react-dnd'\nimport { ITEM_TYPE } from '../../constants'\n\nexport const propTypes = {\n  task: PropTypes.object,\n  columnIndex: PropTypes.number,\n  taskIndex: PropTypes.number,\n}\n\nfunction Task(props) {\n  const { task, columnIndex, taskIndex } = props\n  const { sortTaskList, insertToTaskList } = useContext(ContentContext)\n  const { id, content } = task\n\n  const taskRef = useRef(null)\n\n  const [collectedDragProps, drag, preview] = useDrag({\n    item: {\n      type: ITEM_TYPE.TASK,\n      task,\n      columnIndex,\n      taskIndex,\n    },\n    collect: (monitor) => ({\n      canDrag: Boolean(monitor.canDrag()),\n      isDragging: Boolean(monitor.isDragging()),\n      didDrop: Boolean(monitor.didDrop()),\n    }),\n  })\n\n  const { isDragging } = collectedDragProps\n\n  const [collectedDropProps, drop] = useDrop({\n    accept: ITEM_TYPE.TASK,\n    hover: (item, monitor) => {\n      // 異常處理判斷\n      if (!taskRef.current) return\n      if (!monitor.canDrop()) return\n\n      const sourceColumnIndex = item.columnIndex\n      const sourceTaskIndex = item.taskIndex\n      const targetColumnIndex = columnIndex\n      const targetTaskIndex = taskIndex\n\n      // 如果拖曳目標和放置目標相同的話，停止執行\n      if (sourceColumnIndex === targetColumnIndex && sourceTaskIndex === targetTaskIndex) return {}\n\n      if (sourceColumnIndex === targetColumnIndex) {\n        sortTaskList({ sourceTaskIndex, targetTaskIndex, sourceColumnIndex })\n      } else {\n        insertToTaskList({\n          sourceColumnIndex,\n          sourceTaskIndex,\n          targetColumnIndex,\n          targetTaskIndex,\n        })\n      }\n\n      item.columnIndex = targetColumnIndex\n      item.taskIndex = targetTaskIndex\n    },\n    collect: (monitor) => ({\n      isOver: Boolean(monitor.isOver()),\n      canDrop: Boolean(monitor.canDrop()),\n      isOverCurrent: monitor.isOver({ shallow: true }),\n    }),\n  })\n\n  const { isOver } = collectedDropProps\n\n  drag(drop(taskRef))\n\n  return (\n    <div className=\"task\" ref={preview(taskRef)} data-is-over={isOver} data-is-dragging={isDragging}>\n      <strong>[IT-{id}]</strong>\n      <p>{content}</p>\n    </div>\n  )\n}\n\nexport default Task\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport Task from '../Task'\nimport './style.css'\nimport { TASK_STATUS_NAME, ITEM_TYPE } from '../../constants'\nimport { useDrop } from 'react-dnd'\nimport { ContentContext } from '../../context'\n\nexport const propTypes = {\n  columnList: PropTypes.array,\n  columnIndex: PropTypes.number,\n  columnName: PropTypes.string,\n}\n\nfunction Column(props) {\n  const { columnList = [], columnIndex } = props\n  const { addToTaskList } = useContext(ContentContext)\n  // console.log(columnList)\n  const columnTitle = TASK_STATUS_NAME[columnIndex]\n\n  const [collectedProps, drop] = useDrop({\n    accept: ITEM_TYPE.TASK,\n    drop: (item, monitor) => {\n      const didDrop = monitor.didDrop()\n      if (didDrop) return\n      const sourceTaskIndex = monitor.getItem().taskIndex\n      const sourceColumnIndex = monitor.getItem().columnIndex\n      const targetColumnIndex = columnIndex\n      addToTaskList({ sourceTaskIndex, sourceColumnIndex, targetColumnIndex })\n    },\n    canDrop: (item, monitor) => {\n      return monitor.getItem().columnIndex !== columnIndex\n    },\n    collect: (monitor) => ({\n      isOver: Boolean(monitor.isOver()),\n      canDrop: Boolean(monitor.canDrop()),\n      isOverCurrent: monitor.isOver({ shallow: true }),\n    }),\n  })\n\n  const { isOver, canDrop, isOverCurrent } = collectedProps\n\n  return (\n    <div className=\"column\" ref={drop} data-is-over={isOver && isOverCurrent} data-can-drop={canDrop}>\n      <h3 className=\"column-title\">{columnTitle}</h3>\n      {columnList.map((task, taskIndex) => {\n        return <Task key={task.id} task={task} columnIndex={columnIndex} taskIndex={taskIndex} />\n      })}\n    </div>\n  )\n}\n\nexport default Column\n","const initialTaskLists = [\n  [\n    { id: 100, content: 'Code Refinement' },\n    { id: 102, content: 'Study Vue' },\n    { id: 103, content: 'Add RWD' },\n  ],\n  [\n    { id: 104, content: 'Fix IE bugs' },\n    { id: 105, content: 'Study React-DnD' },\n  ],\n  [\n    { id: 106, content: 'Write testing' }\n  ],\n\n]\n\nexport { initialTaskLists }","import React, { useState, useEffect } from 'react'\nimport Column from '../Column'\nimport './style.css'\nimport { DndProvider } from 'react-dnd'\nimport Backend from 'react-dnd-html5-backend'\nimport { initialTaskLists } from '../../initialTasks'\nimport { ContentContext } from '../../context'\nimport _ from 'lodash'\n\nexport const propTypes = {}\n\nfunction Board(props) {\n  const [taskList, setTaskList] = useState(initialTaskLists)\n  useEffect(() => { \n    console.log('%c STATE %c taskList ',\n      'background:#35495e; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff',\n      'background:#61dafb; padding: 1px; border-radius: 0 3px 3px 0;  color: #35495e', taskList)\n  }\n  , [taskList])\n  \n\n  const addToTaskList = ({ sourceTaskIndex, sourceColumnIndex, targetColumnIndex }) => {\n    console.log('%c FUNCTION CALL %c addToTaskList ',\n      'background:#35495e; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff',\n      'background:#BF6D65; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff')\n    let newTaskList = _.cloneDeep(taskList)\n    let task = newTaskList[sourceColumnIndex][sourceTaskIndex]\n    newTaskList[sourceColumnIndex].splice(sourceTaskIndex, 1)\n    newTaskList[targetColumnIndex].push(task)\n    setTaskList(newTaskList)\n  }\n\n  const insertToTaskList = ({ sourceTaskIndex, sourceColumnIndex, targetTaskIndex, targetColumnIndex }) => {\n    console.log('%c FUNCTION CALL %c insertToTaskList ',\n      'background:#35495e; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff',\n      'background:#038C8C; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff')\n    let newTaskList = _.cloneDeep(taskList)\n    let task = newTaskList[sourceColumnIndex][sourceTaskIndex]\n    newTaskList[sourceColumnIndex].splice(sourceTaskIndex, 1)\n    newTaskList[targetColumnIndex].splice(targetTaskIndex, 0, task)\n    setTaskList(newTaskList)\n  }\n\n  const sortTaskList = ({ sourceTaskIndex, targetTaskIndex, sourceColumnIndex }) => {\n    console.log('%c FUNCTION CALL %c sortTaskList ',\n      'background:#35495e; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff',\n      'background:#F2D785; padding: 1px; border-radius: 0 3px 3px 0;  color: #35495e')\n    let newTaskList = _.cloneDeep(taskList)\n    let currentTaskList = newTaskList[sourceColumnIndex]\n    let task = currentTaskList[sourceTaskIndex]\n    currentTaskList[sourceTaskIndex] = currentTaskList[targetTaskIndex]\n    currentTaskList[targetTaskIndex] = task\n    newTaskList[sourceColumnIndex] = currentTaskList\n    setTaskList(newTaskList)\n  }\n\n  const context = { addToTaskList, insertToTaskList, sortTaskList }\n\n  return (\n    <DndProvider backend={Backend}>\n      <ContentContext.Provider value={context}>\n        <div className=\"board\">\n          {taskList.map((columnList, columnIndex) => (\n            <Column key={columnIndex} columnList={columnList} columnIndex={columnIndex} sortTaskList={sortTaskList} />\n          ))}\n        </div>\n      </ContentContext.Provider>\n    </DndProvider>\n  )\n}\n\nexport default Board\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}